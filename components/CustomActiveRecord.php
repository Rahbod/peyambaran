<?php

namespace app\components;

use app\models\Log;
use Yii;
use yii\db\ActiveRecord;
use yii\helpers\Json;

abstract class CustomActiveRecord extends ActiveRecord
{
    /* This fields for save system logs */
    protected $logging = true;
    protected $logModelID;
    protected $insertLogCode;
    protected $updateLogCode;
    protected $deleteLogCode;
    protected $searchLogCode;
    private $_old;
    /* end log */

    public function beforeSave($insert)
    {
        /* for log */
        $this->_old = $this->oldAttributes;

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function afterSave($insert, $changedAttributes)
    {
        /* save log process */
        if ($this->logging) {
            if ($insert && $this->insertLogCode) {
                $attributes = $this->attributes;
                if (isset($attributes['dyna']))
                    $attributes['dyna'] = $this->getDynamicAttributes();
                Log::create(Log::ACTION_INSERT,
                    $this->insertLogCode,
                    $this->tableName(),
                    $this->logModelID ? $this->{$this->logModelID} : $this->primaryKey,
                    Json::encode(['new' => $attributes])
                );
            } else if (!$insert && $this->updateLogCode)
                Log::create(Log::ACTION_UPDATE,
                    $this->updateLogCode,
                    $this->tableName(),
                    $this->logModelID ? $this->{$this->logModelID} : $this->primaryKey,
                    Json::encode(['old' => $changedAttributes, 'new' => $this->getNewValues($changedAttributes, $this->attributes)])
                );
        }
        /* end save log process */

        parent::afterSave($insert, $changedAttributes);
    }

    public function beforeDelete()
    {
        /* for log */
        $this->_old = $this->oldAttributes;
        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }

    public function afterDelete()
    {
        /* save log process */
        if ($this->logging && $this->deleteLogCode)
            @Log::create(Log::ACTION_DELETE,
                $this->deleteLogCode,
                $this->tableName(),
                $this->logModelID ? $this->{$this->logModelID} : $this->primaryKey,
                Json::encode(['old' => $this->_old])
            );
        /* save log process */

        parent::afterDelete();
    }

    public function afterFind()
    {
        /* save log process */
        if ($this->logging && $this->searchLogCode)
            @Log::create(Log::ACTION_SEARCH,
                $this->searchLogCode,
                $this->tableName(),
                $this->logModelID ? $this->{$this->logModelID} : $this->primaryKey
            );
        /* save log process */

        parent::afterDelete();
    }

    public function getOld($changedAttributes)
    {
        $keys = array_keys($changedAttributes);
        return array_filter($this->_old, function ($key) use ($keys) {
            return in_array($key, $keys);
        }, ARRAY_FILTER_USE_KEY);
    }

    public function getNewValues($changedAttributes, $attributes)
    {
        $result = [];
        foreach (array_keys($changedAttributes) as $attributeName)
            $result[$attributeName] = $attributes[$attributeName];
        return $result;
    }
}